#+TITLE: structs
* Defining and instantiating Structs

#+begin_src rust
  struct User {
      active: bool,
      username: String,
      email: String,
      sign_in_count: u64,
  }
#+end_src


creating an instance of a struct:

to get a specific value from a struct we use dot notation like user1.email . If the instance ins mutable we can change a value by using the dot
notation and assigning into a particular field. 

#+begin_src rust

  fn main() {
      struct User {
	  active: bool,
	  username: String,
	  email: String,
	  sign_in_count: u64,
      }

      let mut user1 = User {
	  email: String::from("testing@mailr.one"),
	  username: String::from("username123"),
	  active: true,
	  sign_in_count: 1,
	};
      user1.email = String::from("a-new-email@hotmail.com");

      let user2 = User {
	  active: user1.active,
	  email: String::from("another@email.com"),
	  username: user1.username,
	  sign_in_count: 1,
      }

      let user3 = User {
	  email: String::from("anothertesting@email.com"),
	  ..user1
      }
    }

  fn build_user(email: String, username: String) -> User {
      User {
	  email: email, // OR email,
	  username: username, // OR username,
	  active: true,
	  sign_in_count: 1,
      }
  }

#+end_src


* tuple structs

ust also supports structs that look similar to tuples, called tuple structs. Tuple structs have the added meaning the struct name provides but don’t have names associated with their fields; rather, they just have the types of the fields. Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from other tuples, and when naming each field as in a regular struct would be verbose or redundant.

To define a tuple struct, start with the struct keyword and the struct name followed by the types in the tuple. For example, here we define and use two tuple structs named Color and Point:

#+begin_src rust
  struct Color(i32, i32, i32);
  struct Point(i32, i32, i32);

  fn main() {
      let black = Color(0, 0, 0);
      let origin = Point(0, 0, 0);
  }

#+end_src

* unit like structs

you can also define structs taht dont have any fields, there are called unit-like structs because they behave similarly to (), the unit type mentioned in "The Tuple Type" section. these
can be useful when you need to impliment a trait on some type but done have any data that you want  to store in the type itself. traits are discuessed in chapter 10. 

#+begin_src rust
  struct AlwaysEqual;

  fn main() {
      let subject = AlwaysEqual;
  }

#+end_src

* ownership of struct data

In the User struct definition in Listing 5-1, we used the owned String type rather than the &str string slice type. This is a deliberate choice because we want each instance of this struct to own all of its data and for that data to be valid for as long as the entire struct is valid.

It’s also possible for structs to store references to data owned by something else, but to do so requires the use of lifetimes, a Rust feature that we’ll discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is. Let’s say you try to store a reference in a struct without specifying lifetimes, like the following; this won’t work:

#+begin_src rust
  //this WONT work

  struct User {
    active: bool,
    username: &str,
    email: &str,
    sign_in_count: u64,
}

fn main() {
    let user1 = User {
        email: "someone@example.com",
        username: "someusername123",
        active: true,
        sign_in_count: 1,
    };
}
#+end_src



* example program using structs
To understand when we might want to use structs, let’s write a program that calculates the area of a rectangle. We’ll start by using single variables, and then refactor the program until we’re using structs instead.

Let’s make a new binary project with Cargo called rectangles that will take the width and height of a rectangle specified in pixels and calculate the area of the rectangle. Listing 5-8 shows a short program with one way of doing exactly that in our project’s src/main.rs.

